// <auto-generated />
using System;
using LightWiki.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LightWiki.Data.Migrations
{
    [DbContext(typeof(WikiContext))]
    partial class WikiContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GroupUser", b =>
                {
                    b.Property<int>("GroupsId")
                        .HasColumnType("integer")
                        .HasColumnName("GROUPS_ID");

                    b.Property<int>("UsersId")
                        .HasColumnType("integer")
                        .HasColumnName("USERS_ID");

                    b.HasKey("GroupsId", "UsersId")
                        .HasName("PK_GROUP_USER");

                    b.HasIndex("UsersId")
                        .HasDatabaseName("IX_GROUP_USER_USERS_ID");

                    b.ToTable("GROUP_USER", (string)null);
                });

            modelBuilder.Entity("LightWiki.Domain.Models.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATED_AT");

                    b.Property<int>("GlobalAccessRule")
                        .HasColumnType("integer")
                        .HasColumnName("GLOBAL_ACCESS_RULE");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("NAME");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATED_AT");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("USER_ID");

                    b.HasKey("Id")
                        .HasName("PK_ARTICLES");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_ARTICLES_USER_ID");

                    b.ToTable("ARTICLES", (string)null);
                });

            modelBuilder.Entity("LightWiki.Domain.Models.ArticleGroupAccessRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ArticleAccessRule")
                        .HasColumnType("integer")
                        .HasColumnName("ARTICLE_ACCESS_RULE");

                    b.Property<int>("ArticleId")
                        .HasColumnType("integer")
                        .HasColumnName("ARTICLE_ID");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer")
                        .HasColumnName("GROUP_ID");

                    b.HasKey("Id")
                        .HasName("PK_ARTICLE_GROUP_ACCESS_RULES");

                    b.HasIndex("ArticleId")
                        .HasDatabaseName("IX_ARTICLE_GROUP_ACCESS_RULES_ARTICLE_ID");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("IX_ARTICLE_GROUP_ACCESS_RULES_GROUP_ID");

                    b.ToTable("ARTICLE_GROUP_ACCESS_RULES", (string)null);
                });

            modelBuilder.Entity("LightWiki.Domain.Models.ArticlePersonalAccessRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ArticleAccessRule")
                        .HasColumnType("integer")
                        .HasColumnName("ARTICLE_ACCESS_RULE");

                    b.Property<int>("ArticleId")
                        .HasColumnType("integer")
                        .HasColumnName("ARTICLE_ID");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("USER_ID");

                    b.HasKey("Id")
                        .HasName("PK_ARTICLE_PERSONAL_ACCESS_RULES");

                    b.HasIndex("ArticleId")
                        .HasDatabaseName("IX_ARTICLE_PERSONAL_ACCESS_RULES_ARTICLE_ID");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_ARTICLE_PERSONAL_ACCESS_RULES_USER_ID");

                    b.ToTable("ARTICLE_PERSONAL_ACCESS_RULES", (string)null);
                });

            modelBuilder.Entity("LightWiki.Domain.Models.ArticleVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ArticleId")
                        .HasColumnType("integer")
                        .HasColumnName("ARTICLE_ID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATED_AT");

                    b.Property<string>("Patch")
                        .HasColumnType("text")
                        .HasColumnName("PATCH");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATED_AT");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("USER_ID");

                    b.HasKey("Id")
                        .HasName("PK_ARTICLE_VERSIONS");

                    b.HasIndex("ArticleId")
                        .HasDatabaseName("IX_ARTICLE_VERSIONS_ARTICLE_ID");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_ARTICLE_VERSIONS_USER_ID");

                    b.ToTable("ARTICLE_VERSIONS", (string)null);
                });

            modelBuilder.Entity("LightWiki.Domain.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("NAME");

                    b.HasKey("Id")
                        .HasName("PK_GROUPS");

                    b.ToTable("GROUPS", (string)null);
                });

            modelBuilder.Entity("LightWiki.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATED_AT");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("NAME");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATED_AT");

                    b.HasKey("Id")
                        .HasName("PK_USERS");

                    b.ToTable("USERS", (string)null);
                });

            modelBuilder.Entity("GroupUser", b =>
                {
                    b.HasOne("LightWiki.Domain.Models.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_GROUP_USER_GROUPS_GROUPS_ID");

                    b.HasOne("LightWiki.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_GROUP_USER_USERS_USERS_ID");
                });

            modelBuilder.Entity("LightWiki.Domain.Models.Article", b =>
                {
                    b.HasOne("LightWiki.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ARTICLES_USERS_USER_ID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LightWiki.Domain.Models.ArticleGroupAccessRule", b =>
                {
                    b.HasOne("LightWiki.Domain.Models.Article", "Article")
                        .WithMany("GroupAccessRules")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ARTICLE_GROUP_ACCESS_RULES_ARTICLES_ARTICLE_ID");

                    b.HasOne("LightWiki.Domain.Models.Group", "Group")
                        .WithMany("ArticleGroupAccessRules")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ARTICLE_GROUP_ACCESS_RULES_GROUPS_GROUP_ID");

                    b.Navigation("Article");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("LightWiki.Domain.Models.ArticlePersonalAccessRule", b =>
                {
                    b.HasOne("LightWiki.Domain.Models.Article", "Article")
                        .WithMany("PersonalAccessRules")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ARTICLE_PERSONAL_ACCESS_RULES_ARTICLES_ARTICLE_ID");

                    b.HasOne("LightWiki.Domain.Models.User", "User")
                        .WithMany("ArticlePersonalAccessRules")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ARTICLE_PERSONAL_ACCESS_RULES_USERS_USER_ID");

                    b.Navigation("Article");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LightWiki.Domain.Models.ArticleVersion", b =>
                {
                    b.HasOne("LightWiki.Domain.Models.Article", "Article")
                        .WithMany("Versions")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ARTICLE_VERSIONS_ARTICLES_ARTICLE_ID");

                    b.HasOne("LightWiki.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ARTICLE_VERSIONS_USERS_USER_ID");

                    b.Navigation("Article");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LightWiki.Domain.Models.Article", b =>
                {
                    b.Navigation("GroupAccessRules");

                    b.Navigation("PersonalAccessRules");

                    b.Navigation("Versions");
                });

            modelBuilder.Entity("LightWiki.Domain.Models.Group", b =>
                {
                    b.Navigation("ArticleGroupAccessRules");
                });

            modelBuilder.Entity("LightWiki.Domain.Models.User", b =>
                {
                    b.Navigation("ArticlePersonalAccessRules");
                });
#pragma warning restore 612, 618
        }
    }
}
